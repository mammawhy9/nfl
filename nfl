#!/bin/python3

import sys
import json
import os
import getpass
import collections

def findMissing(tab,limit_l,limit_p):
    brak=[]
    for i in range(limit_l,limit_p):
        if not i in tab:
            brak.append(i)
            continue
    return brak

# TODO zrobić mapę klas
class User:
    name = ''

    def __init__(self):
        self.getName()

    def getName(self):
        self.name = getpass.getuser()

# TODO Ogarnąć nazwy zmiennych, wydzielić więcej funkcji
class notepad:
    nr = 0
    tasks = {}

    name = ''

    def __init__(self, name):
        self.name = name

    def show(self, what =[]):
        print(what)
        if what == "tasks":
            tab = []
            self.readTasksFromFile()
            lista = collections.OrderedDict(sorted(self.tasks.items()))
            for i in lista.keys():
                tab.append(i)

            for i in range(len(tab)):
                tab[i] = int(tab[i])
            tab = sorted(tab)
            print(tab)
            maks = max(tab)
            test = {}
            brak=[]
            wystapil_brak =0
            cursor = 0
            for j in range(int(len(tab)/10)+1):
                strona=[]
                print(j)

                limit_l = j*10 + wystapil_brak
                if len(tab) <= (j+1)*10:
                    limit = len(tab) + wystapil_brak
                else:
                    limit = (j+1)*10 + wystapil_brak
                print("Limit: "+str(limit)+" "+str(j*10))
                if len(brak) > 0:
                    wystapil_brak+=1
                    limit_l +=1
                    limit +=1

                brak = findMissing(tab,limit_l,limit)

                if len(brak) > 0:
                    while(True):
                        limit = limit + 1
                        if limit in tab:
                            break
                        else:
                            limit +=1

                for i in range(limit_l,limit):
                    if i in tab:
                        strona.append(i)



                test.update({j:strona})

                print(test)
            for i in test.get(0):
                    print(str(i)+" "+self.tasks[str(i)]['title'])

            while(True):
                cursor = input()                           # dać wyjątek by nie mozna bylo dac cos innego niz liczbę

                if cursor == '':
                    return
                if test.get(int(cursor)) != None:
                    print(test.get(int(cursor)))
                    for i in test.get(int(cursor)):
                        print(str(i)+" "+self.tasks[str(i)]['title'])
                else:
                    print("Nie ma takiej strony!")



   #     for i in range(maks+1):
     #       if str(i) in self.tasks:
    #            print(str(i)+" "+self.tasks[str(i)]['title'])

    def add(self, tytul):
        self.readTasksFromFile()
        lista = collections.OrderedDict(sorted(self.tasks.items()))
        tab = []
        liczba_pusta = 0
        if self.tasks != None:
            for i in lista.keys():
                tab.append(i)
            for i in range(len(tab)):
                tab[i] = int(tab[i])
            tab=sorted(tab)
            for i in range(len(tab)):
                if int(tab[i]) != i:
                    liczba_pusta = i
                    break
                else:
                    liczba_pusta = None

        self.writeTaskToFile(tytul,liczba_pusta)
    def rm(self, number):
        self.readTasksFromFile()

        if self.tasks[number] != None:
            del self.tasks[number]
        print(self.tasks)
        self.writeTaskToFile()

    def readTasksFromFile(self):
        notatniczek = open(os.path.join("/home/" + jarvis.user.name + "/.taskList"), 'r+')
        lista = notatniczek.read()
        if lista != '':
            self.tasks = json.loads(lista)


    def writeTaskToFile(self, title=None, number = None):
        notatniczek = open(os.path.join("/home/" + jarvis.user.name + "/.taskList"), 'w')
        if number != None:
            numberToWrite = number
        else:
            numberToWrite = len(self.tasks)

        if title != None :
            self.tasks[int(numberToWrite)] = {'title': title}
        notatniczek.write(json.dumps(self.tasks))
    def checkIfMissing():
        return 0


class task:
    title = ""


class janitor:
    command = ''
    destiny = ''

    user = User()
    notepadInternal = notepad(user.name)

    def __init__(self):
        user = User()
        self.notepadInternal = notepad(user.name)

    def readCommand(self):
        comment = ''
        command = "self.notepadInternal." + sys.argv[1] + "('" + sys.argv[2]
        if len(sys.argv) > 3:
            for i in range(3,len(sys.argv)):
                command+=' '+sys.argv[i]
        command +="')"
        print(command)
        eval(command)


jarvis = janitor()
jarvis.readCommand()
